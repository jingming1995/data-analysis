# -*- coding: utf-8 -*-
from __future__ import unicode_literals
import numpy as np
a = np.arange(11, 20).reshape(3, 3)
# print(a)
np.savetxt('../data/test.csv', a, delimiter=',', fmt='%d')  # 写入a到表格
c = np.loadtxt('../data/test.csv', delimiter=',',  # 读取表格列内容
               usecols=(0, 2), dtype='i4')
print(c)

#-------------------------运算函数笔记-------------------------------------------
# 成交量加权平均值函数np.average(样本数组，weights=权重数组)  # 点乘运算
# x = w1  # 样本
# y = s1  # 权重 样板*权重/权重之和

# 线性代数:
# 一个向量的每一个元素和另一向量的每一个元素相乘再相加叫:点乘运算dot()
# men = x列表.dot(y列表) / y.sum()线性代数点乘公式

# 时间加权平均值(用历史数据分析平均值预测未来数据走势)

# # def abc(dmy):
#     dmy = str(dmy, encoding='utf-8')  # 按照unicode utf8的格式去解读dmy
#     date = dt.datetime.strptime(dmy, % d - %m - %y).data()
#     # 利用dt.datetime中的strptime(解读dmy,生成年月日对象).date()取date子对象
#     days = (date - dt.date.min).days  # 用现有的年月日减去时间元年(date.min)结果用天表示.days
# 利用转换器将文件日期数据进行处理或做点乘运算得到平均权重值
#-------------------------------------------------------------------------
# 1)max/min：在一个数组的各个元素中寻找最大和最小元素。
# a:
# 9 7 5
# 3 1 8
# 6 6 1
# a.max() -> 9
# a.min() -> 1
# 2)maximum/minimum：在两个数组之间组织对应位置最大值或最小值的集合数组。
# a:
# 9 7 5
# 3 1 8
# 6 6 1
# b:
# 6 1 9
# 7 1 7
# 4 4 5
# np.maximum(a, b) ->#重新生成一个数组
# 9 7 9
# 7 1 8
# 6 6 5
#----------------------------------------------------------------------------
# 价格范围和价格幅度：
# 1,价格范围：在一定时期内最高的最高价和最低的最低价之差
# 2,价格幅度：在一定时期内最高价和最低价的极差
# np.ptp()极差的概念最高减去最低,极差是针对一个数组的
#--------------------------------------------------------------------------

# 中位数
# 将多个样本排序，排序以后位于中间位置的元素成为中位数。
# 10 30 50 70 90#奇数比较
#            ^
#            中
# 10 30 50 70#偶数比较
#       ^   ^
#        ----
#         40
#         中
# A：序列
# L：序列长度，元素个数
# M = (A[(L-1)/2] + A[L/2]) / 2#中位数兼容表达式公式自动舍弃小数点只能是整数
# np.median(有序或无序数组)#中位数函数
# np.msort(数组)#快速排序算法对一个数组进行排序，排序复杂度达到'线性个数级'。自动升序排列
#-------------------------------------------------------------------------
# 标准差被平方叫做离差方，开方后的值数据还原成	标准差
#  样本s + 权重w / w x = 得到均值 离差是样本减去均值
# 样本：S = [s1, s2, ..., sn]
# 均值：m = (s1+s2+...+sn) / n
# 离差：D = [d1, d2, ..., dn], di = si - m
# 离差方：Q	= [q1, q2, ..., qn], qi = di^2
# (总体)方差：v = (q1+q2+...+qn) / n
# (总体)标准差：s = sqrt(v)，方均根
# np.std(样本数组)->标准差
